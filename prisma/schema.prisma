// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts Account[]
  sessions Session[]

  anime              Anime[]
  rating             Rating[]
  finishedWatching   FinishedWatching[]
  currentlyWatching  CurrentlyWatching[]
  notStartedWatching NotStartedWatching[]

  community Community[]
  post      Post[]
  comment   Comment[]

  reviews     Reviews[]
  reviewLikes ReviewLike[]

  like Like[]

  pollVote PollVote[]
  poll     Poll[]

  createdAt DateTime @default(now())
}

model Anime {
  id    String @id @default(cuid())
  name  String @unique
  genre String

  releaseYear String
  director    String
  description String @db.VarChar(1500)
  trailerLink String
  coverImage  String

  rating       Rating[]
  totalRatings Int      @default(0)

  finishedWatching   FinishedWatching[]
  currentlyWatching  CurrentlyWatching[]
  notStartedWatching NotStartedWatching[]

  reviews Reviews[]

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([name])
  @@index([creatorId])
}

model Reviews {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

  reviewLikes ReviewLike[]

  title String @db.VarChar(50)
  text  String @db.VarChar(1500)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([animeId])
}

model ReviewLike {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reviewId String
  review   Reviews @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
}

model Rating {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

  rating Int

  @@index([userId])
  @@index([animeId])
}

//----------------------------------------
model FinishedWatching {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([animeId])
}

model CurrentlyWatching {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([animeId])
}

model NotStartedWatching {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([animeId])
}

//----------------------------------------

model Community {
  id          String @id @default(cuid())
  name        String @unique
  description String @db.VarChar(300)

  category String

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  post Post[]

  createdAt DateTime @default(now())

  @@index([creatorId])
}

model Post {
  id String @id @default(cuid())

  title   String @db.VarChar(80)
  message String @db.VarChar(600)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  like        Like[]

  comment Comment[]

  createdAt DateTime @default(now())

  @@index([communityId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(300)
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

//----------------------------------------
model Poll {
  id String @id @default(cuid())

  question String @db.VarChar(150)

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  option PollOption[]

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PollOption {
  id String @id @default(cuid())

  option String @db.VarChar(80)

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  vote PollVote[]

  createdAt DateTime @default(now())
}

model PollVote {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
